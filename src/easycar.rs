// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `easycar.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct RegisterReq {
    // message fields
    pub gId: ::std::string::String,
    pub branches: ::protobuf::RepeatedField<RegisterReq_Branch>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterReq {
    fn default() -> &'a RegisterReq {
        <RegisterReq as ::protobuf::Message>::default_instance()
    }
}

impl RegisterReq {
    pub fn new() -> RegisterReq {
        ::std::default::Default::default()
    }

    // string gId = 1;


    pub fn get_gId(&self) -> &str {
        &self.gId
    }
    pub fn clear_gId(&mut self) {
        self.gId.clear();
    }

    // Param is passed by value, moved
    pub fn set_gId(&mut self, v: ::std::string::String) {
        self.gId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gId(&mut self) -> &mut ::std::string::String {
        &mut self.gId
    }

    // Take field
    pub fn take_gId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gId, ::std::string::String::new())
    }

    // repeated .proto.RegisterReq.Branch branches = 2;


    pub fn get_branches(&self) -> &[RegisterReq_Branch] {
        &self.branches
    }
    pub fn clear_branches(&mut self) {
        self.branches.clear();
    }

    // Param is passed by value, moved
    pub fn set_branches(&mut self, v: ::protobuf::RepeatedField<RegisterReq_Branch>) {
        self.branches = v;
    }

    // Mutable pointer to the field.
    pub fn mut_branches(&mut self) -> &mut ::protobuf::RepeatedField<RegisterReq_Branch> {
        &mut self.branches
    }

    // Take field
    pub fn take_branches(&mut self) -> ::protobuf::RepeatedField<RegisterReq_Branch> {
        ::std::mem::replace(&mut self.branches, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RegisterReq {
    fn is_initialized(&self) -> bool {
        for v in &self.branches {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gId)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.branches)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gId);
        }
        for value in &self.branches {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gId.is_empty() {
            os.write_string(1, &self.gId)?;
        }
        for v in &self.branches {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterReq {
        RegisterReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gId",
                |m: &RegisterReq| { &m.gId },
                |m: &mut RegisterReq| { &mut m.gId },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegisterReq_Branch>>(
                "branches",
                |m: &RegisterReq| { &m.branches },
                |m: &mut RegisterReq| { &mut m.branches },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterReq>(
                "RegisterReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterReq {
        static instance: ::protobuf::rt::LazyV2<RegisterReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterReq::new)
    }
}

impl ::protobuf::Clear for RegisterReq {
    fn clear(&mut self) {
        self.gId.clear();
        self.branches.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterReq_Branch {
    // message fields
    pub uri: ::std::string::String,
    pub reqData: ::std::string::String,
    pub reqHeader: ::std::string::String,
    pub tranType: TranType,
    pub protocol: ::std::string::String,
    pub action: Action,
    pub level: i32,
    pub timeout: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterReq_Branch {
    fn default() -> &'a RegisterReq_Branch {
        <RegisterReq_Branch as ::protobuf::Message>::default_instance()
    }
}

impl RegisterReq_Branch {
    pub fn new() -> RegisterReq_Branch {
        ::std::default::Default::default()
    }

    // string uri = 1;


    pub fn get_uri(&self) -> &str {
        &self.uri
    }
    pub fn clear_uri(&mut self) {
        self.uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        &mut self.uri
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uri, ::std::string::String::new())
    }

    // string reqData = 2;


    pub fn get_reqData(&self) -> &str {
        &self.reqData
    }
    pub fn clear_reqData(&mut self) {
        self.reqData.clear();
    }

    // Param is passed by value, moved
    pub fn set_reqData(&mut self, v: ::std::string::String) {
        self.reqData = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reqData(&mut self) -> &mut ::std::string::String {
        &mut self.reqData
    }

    // Take field
    pub fn take_reqData(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reqData, ::std::string::String::new())
    }

    // string reqHeader = 3;


    pub fn get_reqHeader(&self) -> &str {
        &self.reqHeader
    }
    pub fn clear_reqHeader(&mut self) {
        self.reqHeader.clear();
    }

    // Param is passed by value, moved
    pub fn set_reqHeader(&mut self, v: ::std::string::String) {
        self.reqHeader = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reqHeader(&mut self) -> &mut ::std::string::String {
        &mut self.reqHeader
    }

    // Take field
    pub fn take_reqHeader(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reqHeader, ::std::string::String::new())
    }

    // .proto.TranType tranType = 4;


    pub fn get_tranType(&self) -> TranType {
        self.tranType
    }
    pub fn clear_tranType(&mut self) {
        self.tranType = TranType::UN_KNOW;
    }

    // Param is passed by value, moved
    pub fn set_tranType(&mut self, v: TranType) {
        self.tranType = v;
    }

    // string protocol = 5;


    pub fn get_protocol(&self) -> &str {
        &self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        &mut self.protocol
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.protocol, ::std::string::String::new())
    }

    // .proto.Action action = 6;


    pub fn get_action(&self) -> Action {
        self.action
    }
    pub fn clear_action(&mut self) {
        self.action = Action::UN_KNOW_TRANSACTION_TYPE;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: Action) {
        self.action = v;
    }

    // int32 level = 7;


    pub fn get_level(&self) -> i32 {
        self.level
    }
    pub fn clear_level(&mut self) {
        self.level = 0;
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: i32) {
        self.level = v;
    }

    // int32 timeout = 8;


    pub fn get_timeout(&self) -> i32 {
        self.timeout
    }
    pub fn clear_timeout(&mut self) {
        self.timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: i32) {
        self.timeout = v;
    }
}

impl ::protobuf::Message for RegisterReq_Branch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uri)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reqData)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reqHeader)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tranType, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.protocol)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 6, &mut self.unknown_fields)?
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.level = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timeout = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uri);
        }
        if !self.reqData.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reqData);
        }
        if !self.reqHeader.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.reqHeader);
        }
        if self.tranType != TranType::UN_KNOW {
            my_size += ::protobuf::rt::enum_size(4, self.tranType);
        }
        if !self.protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.protocol);
        }
        if self.action != Action::UN_KNOW_TRANSACTION_TYPE {
            my_size += ::protobuf::rt::enum_size(6, self.action);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::value_size(7, self.level, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timeout != 0 {
            my_size += ::protobuf::rt::value_size(8, self.timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uri.is_empty() {
            os.write_string(1, &self.uri)?;
        }
        if !self.reqData.is_empty() {
            os.write_string(2, &self.reqData)?;
        }
        if !self.reqHeader.is_empty() {
            os.write_string(3, &self.reqHeader)?;
        }
        if self.tranType != TranType::UN_KNOW {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.tranType))?;
        }
        if !self.protocol.is_empty() {
            os.write_string(5, &self.protocol)?;
        }
        if self.action != Action::UN_KNOW_TRANSACTION_TYPE {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.action))?;
        }
        if self.level != 0 {
            os.write_int32(7, self.level)?;
        }
        if self.timeout != 0 {
            os.write_int32(8, self.timeout)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterReq_Branch {
        RegisterReq_Branch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uri",
                |m: &RegisterReq_Branch| { &m.uri },
                |m: &mut RegisterReq_Branch| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reqData",
                |m: &RegisterReq_Branch| { &m.reqData },
                |m: &mut RegisterReq_Branch| { &mut m.reqData },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reqHeader",
                |m: &RegisterReq_Branch| { &m.reqHeader },
                |m: &mut RegisterReq_Branch| { &mut m.reqHeader },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TranType>>(
                "tranType",
                |m: &RegisterReq_Branch| { &m.tranType },
                |m: &mut RegisterReq_Branch| { &mut m.tranType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol",
                |m: &RegisterReq_Branch| { &m.protocol },
                |m: &mut RegisterReq_Branch| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Action>>(
                "action",
                |m: &RegisterReq_Branch| { &m.action },
                |m: &mut RegisterReq_Branch| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "level",
                |m: &RegisterReq_Branch| { &m.level },
                |m: &mut RegisterReq_Branch| { &mut m.level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "timeout",
                |m: &RegisterReq_Branch| { &m.timeout },
                |m: &mut RegisterReq_Branch| { &mut m.timeout },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterReq_Branch>(
                "RegisterReq.Branch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterReq_Branch {
        static instance: ::protobuf::rt::LazyV2<RegisterReq_Branch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterReq_Branch::new)
    }
}

impl ::protobuf::Clear for RegisterReq_Branch {
    fn clear(&mut self) {
        self.uri.clear();
        self.reqData.clear();
        self.reqHeader.clear();
        self.tranType = TranType::UN_KNOW;
        self.protocol.clear();
        self.action = Action::UN_KNOW_TRANSACTION_TYPE;
        self.level = 0;
        self.timeout = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterReq_Branch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterReq_Branch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterResp {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterResp {
    fn default() -> &'a RegisterResp {
        <RegisterResp as ::protobuf::Message>::default_instance()
    }
}

impl RegisterResp {
    pub fn new() -> RegisterResp {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RegisterResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterResp {
        RegisterResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterResp>(
                "RegisterResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterResp {
        static instance: ::protobuf::rt::LazyV2<RegisterResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterResp::new)
    }
}

impl ::protobuf::Clear for RegisterResp {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeginResp {
    // message fields
    pub gId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BeginResp {
    fn default() -> &'a BeginResp {
        <BeginResp as ::protobuf::Message>::default_instance()
    }
}

impl BeginResp {
    pub fn new() -> BeginResp {
        ::std::default::Default::default()
    }

    // string gId = 1;


    pub fn get_gId(&self) -> &str {
        &self.gId
    }
    pub fn clear_gId(&mut self) {
        self.gId.clear();
    }

    // Param is passed by value, moved
    pub fn set_gId(&mut self, v: ::std::string::String) {
        self.gId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gId(&mut self) -> &mut ::std::string::String {
        &mut self.gId
    }

    // Take field
    pub fn take_gId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gId, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BeginResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gId.is_empty() {
            os.write_string(1, &self.gId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BeginResp {
        BeginResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gId",
                |m: &BeginResp| { &m.gId },
                |m: &mut BeginResp| { &mut m.gId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BeginResp>(
                "BeginResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BeginResp {
        static instance: ::protobuf::rt::LazyV2<BeginResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BeginResp::new)
    }
}

impl ::protobuf::Clear for BeginResp {
    fn clear(&mut self) {
        self.gId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeginResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeginResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartReq {
    // message fields
    pub gId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartReq {
    fn default() -> &'a StartReq {
        <StartReq as ::protobuf::Message>::default_instance()
    }
}

impl StartReq {
    pub fn new() -> StartReq {
        ::std::default::Default::default()
    }

    // string gId = 1;


    pub fn get_gId(&self) -> &str {
        &self.gId
    }
    pub fn clear_gId(&mut self) {
        self.gId.clear();
    }

    // Param is passed by value, moved
    pub fn set_gId(&mut self, v: ::std::string::String) {
        self.gId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gId(&mut self) -> &mut ::std::string::String {
        &mut self.gId
    }

    // Take field
    pub fn take_gId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gId, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StartReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gId.is_empty() {
            os.write_string(1, &self.gId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartReq {
        StartReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gId",
                |m: &StartReq| { &m.gId },
                |m: &mut StartReq| { &mut m.gId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StartReq>(
                "StartReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StartReq {
        static instance: ::protobuf::rt::LazyV2<StartReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StartReq::new)
    }
}

impl ::protobuf::Clear for StartReq {
    fn clear(&mut self) {
        self.gId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitReq {
    // message fields
    pub gId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitReq {
    fn default() -> &'a CommitReq {
        <CommitReq as ::protobuf::Message>::default_instance()
    }
}

impl CommitReq {
    pub fn new() -> CommitReq {
        ::std::default::Default::default()
    }

    // string gId = 1;


    pub fn get_gId(&self) -> &str {
        &self.gId
    }
    pub fn clear_gId(&mut self) {
        self.gId.clear();
    }

    // Param is passed by value, moved
    pub fn set_gId(&mut self, v: ::std::string::String) {
        self.gId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gId(&mut self) -> &mut ::std::string::String {
        &mut self.gId
    }

    // Take field
    pub fn take_gId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gId, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CommitReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gId.is_empty() {
            os.write_string(1, &self.gId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitReq {
        CommitReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gId",
                |m: &CommitReq| { &m.gId },
                |m: &mut CommitReq| { &mut m.gId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommitReq>(
                "CommitReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CommitReq {
        static instance: ::protobuf::rt::LazyV2<CommitReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommitReq::new)
    }
}

impl ::protobuf::Clear for CommitReq {
    fn clear(&mut self) {
        self.gId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollBckReq {
    // message fields
    pub gId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RollBckReq {
    fn default() -> &'a RollBckReq {
        <RollBckReq as ::protobuf::Message>::default_instance()
    }
}

impl RollBckReq {
    pub fn new() -> RollBckReq {
        ::std::default::Default::default()
    }

    // string gId = 1;


    pub fn get_gId(&self) -> &str {
        &self.gId
    }
    pub fn clear_gId(&mut self) {
        self.gId.clear();
    }

    // Param is passed by value, moved
    pub fn set_gId(&mut self, v: ::std::string::String) {
        self.gId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gId(&mut self) -> &mut ::std::string::String {
        &mut self.gId
    }

    // Take field
    pub fn take_gId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gId, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RollBckReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gId.is_empty() {
            os.write_string(1, &self.gId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RollBckReq {
        RollBckReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gId",
                |m: &RollBckReq| { &m.gId },
                |m: &mut RollBckReq| { &mut m.gId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RollBckReq>(
                "RollBckReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RollBckReq {
        static instance: ::protobuf::rt::LazyV2<RollBckReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RollBckReq::new)
    }
}

impl ::protobuf::Clear for RollBckReq {
    fn clear(&mut self) {
        self.gId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollBckReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollBckReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetStateReq {
    // message fields
    pub gId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetStateReq {
    fn default() -> &'a GetStateReq {
        <GetStateReq as ::protobuf::Message>::default_instance()
    }
}

impl GetStateReq {
    pub fn new() -> GetStateReq {
        ::std::default::Default::default()
    }

    // string gId = 1;


    pub fn get_gId(&self) -> &str {
        &self.gId
    }
    pub fn clear_gId(&mut self) {
        self.gId.clear();
    }

    // Param is passed by value, moved
    pub fn set_gId(&mut self, v: ::std::string::String) {
        self.gId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gId(&mut self) -> &mut ::std::string::String {
        &mut self.gId
    }

    // Take field
    pub fn take_gId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gId, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetStateReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gId.is_empty() {
            os.write_string(1, &self.gId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetStateReq {
        GetStateReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gId",
                |m: &GetStateReq| { &m.gId },
                |m: &mut GetStateReq| { &mut m.gId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetStateReq>(
                "GetStateReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetStateReq {
        static instance: ::protobuf::rt::LazyV2<GetStateReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetStateReq::new)
    }
}

impl ::protobuf::Clear for GetStateReq {
    fn clear(&mut self) {
        self.gId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetStateReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetStateReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetStateResp {
    // message fields
    pub gId: ::std::string::String,
    pub state: GlobalState,
    pub endTime: i64,
    pub branches: ::protobuf::RepeatedField<GetStateResp_branch>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetStateResp {
    fn default() -> &'a GetStateResp {
        <GetStateResp as ::protobuf::Message>::default_instance()
    }
}

impl GetStateResp {
    pub fn new() -> GetStateResp {
        ::std::default::Default::default()
    }

    // string gId = 1;


    pub fn get_gId(&self) -> &str {
        &self.gId
    }
    pub fn clear_gId(&mut self) {
        self.gId.clear();
    }

    // Param is passed by value, moved
    pub fn set_gId(&mut self, v: ::std::string::String) {
        self.gId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gId(&mut self) -> &mut ::std::string::String {
        &mut self.gId
    }

    // Take field
    pub fn take_gId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gId, ::std::string::String::new())
    }

    // .proto.GlobalState state = 2;


    pub fn get_state(&self) -> GlobalState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = GlobalState::GLOBAL_DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: GlobalState) {
        self.state = v;
    }

    // int64 endTime = 3;


    pub fn get_endTime(&self) -> i64 {
        self.endTime
    }
    pub fn clear_endTime(&mut self) {
        self.endTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_endTime(&mut self, v: i64) {
        self.endTime = v;
    }

    // repeated .proto.GetStateResp.branch branches = 4;


    pub fn get_branches(&self) -> &[GetStateResp_branch] {
        &self.branches
    }
    pub fn clear_branches(&mut self) {
        self.branches.clear();
    }

    // Param is passed by value, moved
    pub fn set_branches(&mut self, v: ::protobuf::RepeatedField<GetStateResp_branch>) {
        self.branches = v;
    }

    // Mutable pointer to the field.
    pub fn mut_branches(&mut self) -> &mut ::protobuf::RepeatedField<GetStateResp_branch> {
        &mut self.branches
    }

    // Take field
    pub fn take_branches(&mut self) -> ::protobuf::RepeatedField<GetStateResp_branch> {
        ::std::mem::replace(&mut self.branches, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetStateResp {
    fn is_initialized(&self) -> bool {
        for v in &self.branches {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gId)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.endTime = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.branches)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gId);
        }
        if self.state != GlobalState::GLOBAL_DEFAULT {
            my_size += ::protobuf::rt::enum_size(2, self.state);
        }
        if self.endTime != 0 {
            my_size += ::protobuf::rt::value_size(3, self.endTime, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.branches {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gId.is_empty() {
            os.write_string(1, &self.gId)?;
        }
        if self.state != GlobalState::GLOBAL_DEFAULT {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.endTime != 0 {
            os.write_int64(3, self.endTime)?;
        }
        for v in &self.branches {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetStateResp {
        GetStateResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gId",
                |m: &GetStateResp| { &m.gId },
                |m: &mut GetStateResp| { &mut m.gId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GlobalState>>(
                "state",
                |m: &GetStateResp| { &m.state },
                |m: &mut GetStateResp| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "endTime",
                |m: &GetStateResp| { &m.endTime },
                |m: &mut GetStateResp| { &mut m.endTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GetStateResp_branch>>(
                "branches",
                |m: &GetStateResp| { &m.branches },
                |m: &mut GetStateResp| { &mut m.branches },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetStateResp>(
                "GetStateResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetStateResp {
        static instance: ::protobuf::rt::LazyV2<GetStateResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetStateResp::new)
    }
}

impl ::protobuf::Clear for GetStateResp {
    fn clear(&mut self) {
        self.gId.clear();
        self.state = GlobalState::GLOBAL_DEFAULT;
        self.endTime = 0;
        self.branches.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetStateResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetStateResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetStateResp_branch {
    // message fields
    pub branchId: ::std::string::String,
    pub reqData: ::std::string::String,
    pub reqHeader: ::std::string::String,
    pub uri: ::std::string::String,
    pub tranType: TranType,
    pub protocol: ::std::string::String,
    pub action: Action,
    pub state: BranchState,
    pub level: i64,
    pub lastErrMsg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetStateResp_branch {
    fn default() -> &'a GetStateResp_branch {
        <GetStateResp_branch as ::protobuf::Message>::default_instance()
    }
}

impl GetStateResp_branch {
    pub fn new() -> GetStateResp_branch {
        ::std::default::Default::default()
    }

    // string branchId = 1;


    pub fn get_branchId(&self) -> &str {
        &self.branchId
    }
    pub fn clear_branchId(&mut self) {
        self.branchId.clear();
    }

    // Param is passed by value, moved
    pub fn set_branchId(&mut self, v: ::std::string::String) {
        self.branchId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branchId(&mut self) -> &mut ::std::string::String {
        &mut self.branchId
    }

    // Take field
    pub fn take_branchId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branchId, ::std::string::String::new())
    }

    // string reqData = 2;


    pub fn get_reqData(&self) -> &str {
        &self.reqData
    }
    pub fn clear_reqData(&mut self) {
        self.reqData.clear();
    }

    // Param is passed by value, moved
    pub fn set_reqData(&mut self, v: ::std::string::String) {
        self.reqData = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reqData(&mut self) -> &mut ::std::string::String {
        &mut self.reqData
    }

    // Take field
    pub fn take_reqData(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reqData, ::std::string::String::new())
    }

    // string reqHeader = 3;


    pub fn get_reqHeader(&self) -> &str {
        &self.reqHeader
    }
    pub fn clear_reqHeader(&mut self) {
        self.reqHeader.clear();
    }

    // Param is passed by value, moved
    pub fn set_reqHeader(&mut self, v: ::std::string::String) {
        self.reqHeader = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reqHeader(&mut self) -> &mut ::std::string::String {
        &mut self.reqHeader
    }

    // Take field
    pub fn take_reqHeader(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reqHeader, ::std::string::String::new())
    }

    // string uri = 4;


    pub fn get_uri(&self) -> &str {
        &self.uri
    }
    pub fn clear_uri(&mut self) {
        self.uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        &mut self.uri
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uri, ::std::string::String::new())
    }

    // .proto.TranType tranType = 5;


    pub fn get_tranType(&self) -> TranType {
        self.tranType
    }
    pub fn clear_tranType(&mut self) {
        self.tranType = TranType::UN_KNOW;
    }

    // Param is passed by value, moved
    pub fn set_tranType(&mut self, v: TranType) {
        self.tranType = v;
    }

    // string protocol = 6;


    pub fn get_protocol(&self) -> &str {
        &self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        &mut self.protocol
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.protocol, ::std::string::String::new())
    }

    // .proto.Action action = 7;


    pub fn get_action(&self) -> Action {
        self.action
    }
    pub fn clear_action(&mut self) {
        self.action = Action::UN_KNOW_TRANSACTION_TYPE;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: Action) {
        self.action = v;
    }

    // .proto.BranchState state = 8;


    pub fn get_state(&self) -> BranchState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = BranchState::UN_KNOW_STATE;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: BranchState) {
        self.state = v;
    }

    // int64 level = 9;


    pub fn get_level(&self) -> i64 {
        self.level
    }
    pub fn clear_level(&mut self) {
        self.level = 0;
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: i64) {
        self.level = v;
    }

    // string lastErrMsg = 10;


    pub fn get_lastErrMsg(&self) -> &str {
        &self.lastErrMsg
    }
    pub fn clear_lastErrMsg(&mut self) {
        self.lastErrMsg.clear();
    }

    // Param is passed by value, moved
    pub fn set_lastErrMsg(&mut self, v: ::std::string::String) {
        self.lastErrMsg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastErrMsg(&mut self) -> &mut ::std::string::String {
        &mut self.lastErrMsg
    }

    // Take field
    pub fn take_lastErrMsg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lastErrMsg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetStateResp_branch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branchId)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reqData)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reqHeader)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uri)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tranType, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.protocol)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 8, &mut self.unknown_fields)?
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.level = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lastErrMsg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.branchId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.branchId);
        }
        if !self.reqData.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reqData);
        }
        if !self.reqHeader.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.reqHeader);
        }
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.uri);
        }
        if self.tranType != TranType::UN_KNOW {
            my_size += ::protobuf::rt::enum_size(5, self.tranType);
        }
        if !self.protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.protocol);
        }
        if self.action != Action::UN_KNOW_TRANSACTION_TYPE {
            my_size += ::protobuf::rt::enum_size(7, self.action);
        }
        if self.state != BranchState::UN_KNOW_STATE {
            my_size += ::protobuf::rt::enum_size(8, self.state);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::value_size(9, self.level, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.lastErrMsg.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.lastErrMsg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.branchId.is_empty() {
            os.write_string(1, &self.branchId)?;
        }
        if !self.reqData.is_empty() {
            os.write_string(2, &self.reqData)?;
        }
        if !self.reqHeader.is_empty() {
            os.write_string(3, &self.reqHeader)?;
        }
        if !self.uri.is_empty() {
            os.write_string(4, &self.uri)?;
        }
        if self.tranType != TranType::UN_KNOW {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.tranType))?;
        }
        if !self.protocol.is_empty() {
            os.write_string(6, &self.protocol)?;
        }
        if self.action != Action::UN_KNOW_TRANSACTION_TYPE {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.action))?;
        }
        if self.state != BranchState::UN_KNOW_STATE {
            os.write_enum(8, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.level != 0 {
            os.write_int64(9, self.level)?;
        }
        if !self.lastErrMsg.is_empty() {
            os.write_string(10, &self.lastErrMsg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetStateResp_branch {
        GetStateResp_branch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branchId",
                |m: &GetStateResp_branch| { &m.branchId },
                |m: &mut GetStateResp_branch| { &mut m.branchId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reqData",
                |m: &GetStateResp_branch| { &m.reqData },
                |m: &mut GetStateResp_branch| { &mut m.reqData },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reqHeader",
                |m: &GetStateResp_branch| { &m.reqHeader },
                |m: &mut GetStateResp_branch| { &mut m.reqHeader },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uri",
                |m: &GetStateResp_branch| { &m.uri },
                |m: &mut GetStateResp_branch| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TranType>>(
                "tranType",
                |m: &GetStateResp_branch| { &m.tranType },
                |m: &mut GetStateResp_branch| { &mut m.tranType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol",
                |m: &GetStateResp_branch| { &m.protocol },
                |m: &mut GetStateResp_branch| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Action>>(
                "action",
                |m: &GetStateResp_branch| { &m.action },
                |m: &mut GetStateResp_branch| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BranchState>>(
                "state",
                |m: &GetStateResp_branch| { &m.state },
                |m: &mut GetStateResp_branch| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "level",
                |m: &GetStateResp_branch| { &m.level },
                |m: &mut GetStateResp_branch| { &mut m.level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lastErrMsg",
                |m: &GetStateResp_branch| { &m.lastErrMsg },
                |m: &mut GetStateResp_branch| { &mut m.lastErrMsg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetStateResp_branch>(
                "GetStateResp.branch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetStateResp_branch {
        static instance: ::protobuf::rt::LazyV2<GetStateResp_branch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetStateResp_branch::new)
    }
}

impl ::protobuf::Clear for GetStateResp_branch {
    fn clear(&mut self) {
        self.branchId.clear();
        self.reqData.clear();
        self.reqHeader.clear();
        self.uri.clear();
        self.tranType = TranType::UN_KNOW;
        self.protocol.clear();
        self.action = Action::UN_KNOW_TRANSACTION_TYPE;
        self.state = BranchState::UN_KNOW_STATE;
        self.level = 0;
        self.lastErrMsg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetStateResp_branch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetStateResp_branch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TranType {
    UN_KNOW = 0,
    TCC = 1,
    SAGE = 2,
}

impl ::protobuf::ProtobufEnum for TranType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TranType> {
        match value {
            0 => ::std::option::Option::Some(TranType::UN_KNOW),
            1 => ::std::option::Option::Some(TranType::TCC),
            2 => ::std::option::Option::Some(TranType::SAGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TranType] = &[
            TranType::UN_KNOW,
            TranType::TCC,
            TranType::SAGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TranType>("TranType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TranType {
}

impl ::std::default::Default for TranType {
    fn default() -> Self {
        TranType::UN_KNOW
    }
}

impl ::protobuf::reflect::ProtobufValue for TranType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Action {
    UN_KNOW_TRANSACTION_TYPE = 0,
    TRY = 1,
    CONFIRM = 2,
    CANCEL = 3,
    NORMAL = 4,
    COMPENSATION = 5,
}

impl ::protobuf::ProtobufEnum for Action {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Action> {
        match value {
            0 => ::std::option::Option::Some(Action::UN_KNOW_TRANSACTION_TYPE),
            1 => ::std::option::Option::Some(Action::TRY),
            2 => ::std::option::Option::Some(Action::CONFIRM),
            3 => ::std::option::Option::Some(Action::CANCEL),
            4 => ::std::option::Option::Some(Action::NORMAL),
            5 => ::std::option::Option::Some(Action::COMPENSATION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Action] = &[
            Action::UN_KNOW_TRANSACTION_TYPE,
            Action::TRY,
            Action::CONFIRM,
            Action::CANCEL,
            Action::NORMAL,
            Action::COMPENSATION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Action>("Action", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Action {
}

impl ::std::default::Default for Action {
    fn default() -> Self {
        Action::UN_KNOW_TRANSACTION_TYPE
    }
}

impl ::protobuf::reflect::ProtobufValue for Action {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BranchState {
    UN_KNOW_STATE = 0,
    B_INIT = 1,
    RETRYING = 2,
    SUCCEED = 3,
    FAILED = 4,
}

impl ::protobuf::ProtobufEnum for BranchState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BranchState> {
        match value {
            0 => ::std::option::Option::Some(BranchState::UN_KNOW_STATE),
            1 => ::std::option::Option::Some(BranchState::B_INIT),
            2 => ::std::option::Option::Some(BranchState::RETRYING),
            3 => ::std::option::Option::Some(BranchState::SUCCEED),
            4 => ::std::option::Option::Some(BranchState::FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BranchState] = &[
            BranchState::UN_KNOW_STATE,
            BranchState::B_INIT,
            BranchState::RETRYING,
            BranchState::SUCCEED,
            BranchState::FAILED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BranchState>("BranchState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BranchState {
}

impl ::std::default::Default for BranchState {
    fn default() -> Self {
        BranchState::UN_KNOW_STATE
    }
}

impl ::protobuf::reflect::ProtobufValue for BranchState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GlobalState {
    GLOBAL_DEFAULT = 0,
    INIT = 1,
    PHASE1_PROCESSING = 2,
    PHASE1_RETRYING = 3,
    PHASE1_FAILED = 4,
    PHASE1_SUCCESS = 5,
    PHASE2_COMMITTING = 6,
    PHASE2_ROLLBACKING = 7,
    PHASE2_COMMIT_FAILED = 8,
    PHASE2_ROLLBACK_FAILED = 9,
    COMMITTED = 10,
    ROLLBACKED = 11,
}

impl ::protobuf::ProtobufEnum for GlobalState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GlobalState> {
        match value {
            0 => ::std::option::Option::Some(GlobalState::GLOBAL_DEFAULT),
            1 => ::std::option::Option::Some(GlobalState::INIT),
            2 => ::std::option::Option::Some(GlobalState::PHASE1_PROCESSING),
            3 => ::std::option::Option::Some(GlobalState::PHASE1_RETRYING),
            4 => ::std::option::Option::Some(GlobalState::PHASE1_FAILED),
            5 => ::std::option::Option::Some(GlobalState::PHASE1_SUCCESS),
            6 => ::std::option::Option::Some(GlobalState::PHASE2_COMMITTING),
            7 => ::std::option::Option::Some(GlobalState::PHASE2_ROLLBACKING),
            8 => ::std::option::Option::Some(GlobalState::PHASE2_COMMIT_FAILED),
            9 => ::std::option::Option::Some(GlobalState::PHASE2_ROLLBACK_FAILED),
            10 => ::std::option::Option::Some(GlobalState::COMMITTED),
            11 => ::std::option::Option::Some(GlobalState::ROLLBACKED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GlobalState] = &[
            GlobalState::GLOBAL_DEFAULT,
            GlobalState::INIT,
            GlobalState::PHASE1_PROCESSING,
            GlobalState::PHASE1_RETRYING,
            GlobalState::PHASE1_FAILED,
            GlobalState::PHASE1_SUCCESS,
            GlobalState::PHASE2_COMMITTING,
            GlobalState::PHASE2_ROLLBACKING,
            GlobalState::PHASE2_COMMIT_FAILED,
            GlobalState::PHASE2_ROLLBACK_FAILED,
            GlobalState::COMMITTED,
            GlobalState::ROLLBACKED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<GlobalState>("GlobalState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for GlobalState {
}

impl ::std::default::Default for GlobalState {
    fn default() -> Self {
        GlobalState::GLOBAL_DEFAULT
    }
}

impl ::protobuf::reflect::ProtobufValue for GlobalState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\reasycar.proto\x12\x05proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\
    \x1cgoogle/api/annotations.proto\x1a\x17validate/validate.proto\"\xa7\
    \x03\n\x0bRegisterReq\x12\x1b\n\x03gId\x18\x01\x20\x01(\tR\x03gIdB\t\xfa\
    B\x06r\x04\x10\x01\x182\x125\n\x08branches\x18\x02\x20\x03(\x0b2\x19.pro\
    to.RegisterReq.BranchR\x08branches\x1a\xc3\x02\n\x06Branch\x12\x1c\n\x03\
    uri\x18\x01\x20\x01(\tR\x03uriB\n\xfaB\x07r\x05\x10\x01\x18\xab\x02\x12\
    \x18\n\x07reqData\x18\x02\x20\x01(\tR\x07reqData\x12\x1c\n\treqHeader\
    \x18\x03\x20\x01(\tR\treqHeader\x127\n\x08tranType\x18\x04\x20\x01(\x0e2\
    \x0f.proto.TranTypeR\x08tranTypeB\n\xfaB\x07\x82\x01\x04\x18\x01\x18\x02\
    \x124\n\x08protocol\x18\x05\x20\x01(\tR\x08protocolB\x18\xfaB\x15r\x13R\
    \x04httpR\x05httpsR\x04grpc\x127\n\x06action\x18\x06\x20\x01(\x0e2\r.pro\
    to.ActionR\x06actionB\x10\xfaB\r\x82\x01\n\x18\x01\x18\x02\x18\x03\x18\
    \x04\x18\x05\x12!\n\x05level\x18\x07\x20\x01(\x05R\x05levelB\x0b\xfaB\
    \x08\x1a\x06\x18\x9f\x8d\x06(\x01\x12\x18\n\x07timeout\x18\x08\x20\x01(\
    \x05R\x07timeout\"\x0e\n\x0cRegisterResp\"\x1d\n\tBeginResp\x12\x10\n\
    \x03gId\x18\x01\x20\x01(\tR\x03gId\"'\n\x08StartReq\x12\x1b\n\x03gId\x18\
    \x01\x20\x01(\tR\x03gIdB\t\xfaB\x06r\x04\x10\x01\x182\"(\n\tCommitReq\
    \x12\x1b\n\x03gId\x18\x01\x20\x01(\tR\x03gIdB\t\xfaB\x06r\x04\x10\x01\
    \x182\")\n\nRollBckReq\x12\x1b\n\x03gId\x18\x01\x20\x01(\tR\x03gIdB\t\
    \xfaB\x06r\x04\x10\x01\x182\"*\n\x0bGetStateReq\x12\x1b\n\x03gId\x18\x01\
    \x20\x01(\tR\x03gIdB\t\xfaB\x06r\x04\x10\x01\x182\"\xdd\x03\n\x0cGetStat\
    eResp\x12\x10\n\x03gId\x18\x01\x20\x01(\tR\x03gId\x12(\n\x05state\x18\
    \x02\x20\x01(\x0e2\x12.proto.GlobalStateR\x05state\x12\x18\n\x07endTime\
    \x18\x03\x20\x01(\x03R\x07endTime\x126\n\x08branches\x18\x04\x20\x03(\
    \x0b2\x1a.proto.GetStateResp.branchR\x08branches\x1a\xbe\x02\n\x06branch\
    \x12\x1a\n\x08branchId\x18\x01\x20\x01(\tR\x08branchId\x12\x18\n\x07reqD\
    ata\x18\x02\x20\x01(\tR\x07reqData\x12\x1c\n\treqHeader\x18\x03\x20\x01(\
    \tR\treqHeader\x12\x10\n\x03uri\x18\x04\x20\x01(\tR\x03uri\x12+\n\x08tra\
    nType\x18\x05\x20\x01(\x0e2\x0f.proto.TranTypeR\x08tranType\x12\x1a\n\
    \x08protocol\x18\x06\x20\x01(\tR\x08protocol\x12%\n\x06action\x18\x07\
    \x20\x01(\x0e2\r.proto.ActionR\x06action\x12(\n\x05state\x18\x08\x20\x01\
    (\x0e2\x12.proto.BranchStateR\x05state\x12\x14\n\x05level\x18\t\x20\x01(\
    \x03R\x05level\x12\x1e\n\nlastErrMsg\x18\n\x20\x01(\tR\nlastErrMsg**\n\
    \x08TranType\x12\x0b\n\x07UN_KNOW\x10\0\x12\x07\n\x03TCC\x10\x01\x12\x08\
    \n\x04SAGE\x10\x02*f\n\x06Action\x12\x1c\n\x18UN_KNOW_TRANSACTION_TYPE\
    \x10\0\x12\x07\n\x03TRY\x10\x01\x12\x0b\n\x07CONFIRM\x10\x02\x12\n\n\x06\
    CANCEL\x10\x03\x12\n\n\x06NORMAL\x10\x04\x12\x10\n\x0cCOMPENSATION\x10\
    \x05*S\n\x0bBranchState\x12\x11\n\rUN_KNOW_STATE\x10\0\x12\n\n\x06B_INIT\
    \x10\x01\x12\x0c\n\x08RETRYING\x10\x02\x12\x0b\n\x07SUCCEED\x10\x03\x12\
    \n\n\x06FAILED\x10\x04*\x82\x02\n\x0bGlobalState\x12\x12\n\x0eGLOBAL_DEF\
    AULT\x10\0\x12\x08\n\x04INIT\x10\x01\x12\x15\n\x11PHASE1_PROCESSING\x10\
    \x02\x12\x13\n\x0fPHASE1_RETRYING\x10\x03\x12\x11\n\rPHASE1_FAILED\x10\
    \x04\x12\x12\n\x0ePHASE1_SUCCESS\x10\x05\x12\x15\n\x11PHASE2_COMMITTING\
    \x10\x06\x12\x16\n\x12PHASE2_ROLLBACKING\x10\x07\x12\x18\n\x14PHASE2_COM\
    MIT_FAILED\x10\x08\x12\x1a\n\x16PHASE2_ROLLBACK_FAILED\x10\t\x12\r\n\tCO\
    MMITTED\x10\n\x12\x0e\n\nROLLBACKED\x10\x0b2\xef\x03\n\x07EasyCar\x12L\n\
    \x05Begin\x12\x16.google.protobuf.Empty\x1a\x10.proto.BeginResp\"\x19\
    \x82\xd3\xe4\x93\x02\x13\"\x0e/easycar/begin:\x01*\x12T\n\x08Register\
    \x12\x12.proto.RegisterReq\x1a\x16.google.protobuf.Empty\"\x1c\x82\xd3\
    \xe4\x93\x02\x16\"\x11/easycar/register:\x01*\x12K\n\x05Start\x12\x0f.pr\
    oto.StartReq\x1a\x16.google.protobuf.Empty\"\x19\x82\xd3\xe4\x93\x02\x13\
    \"\x0e/easycar/start:\x01*\x12N\n\x06Commit\x12\x10.proto.CommitReq\x1a\
    \x16.google.protobuf.Empty\"\x1a\x82\xd3\xe4\x93\x02\x14\"\x0f/easycar/c\
    ommit:\x01*\x12S\n\x08Rollback\x12\x11.proto.RollBckReq\x1a\x16.google.p\
    rotobuf.Empty\"\x1c\x82\xd3\xe4\x93\x02\x16\"\x11/easycar/rollback:\x01*\
    \x12N\n\x08GetState\x12\x12.proto.GetStateReq\x1a\x13.proto.GetStateResp\
    \"\x19\x82\xd3\xe4\x93\x02\x13\"\x0e/easycar/state:\x01*B%Z#github.com/w\
    uqinqiang/easycar/protob\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
